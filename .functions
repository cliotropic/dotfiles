# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}

# Name tabs & windows
# Swiped shamelessly from http://thelucid.com/2012/01/04/naming-your-terminal-tabs-in-osx-lion/
function tabname {
  printf "\e]1;$1\a"
}
 
function winname {
  printf "\e]2;$1\a"
}

# ---- srl legacy cruft --------

unset -f mpo
mpo() {
	mmd2pdf $1.md
	open $1.pdf
}

title() {
    title=$1
    echo -n -e "\033]0;$title\007"
}

setloc() {
    if [[ `hostname -f` =~ comcast.net$ ]] || [[ `hostname -f` =~ cliotrope.local$ ]] || [[ `hostname -f` =~ ^wpc.*.fiu.edu$ ]]; then
        # we're at home
        export TEACHDIR=~/projects/teaching
        export PROJDIR=~/projects/writing
        export PORTFOLIODIR=~/projects/promotion
    elif [[ `hostname -f` =~ hisa813 ]]; then
        # this is the work imac
        export TEACHDIR=~/teaching
        export PROJDIR=~/projects/writing
        export PORTFOLIODIR=~/projects/promotion
    fi
}

# whatever works
kittens() {
    cd ~/DISS/drafts/kittens
    here=`pwd`
    dir=`basename $here`
    newtitle="WRITING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    #osascript -e "tell application \"Terminal\" to set background color of window 1 to {0,0,0,30000}"
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window complete_draft.tex NEXT_STEPS.md    
}

dbs() { # dissertation brainstorm
    cd ~/DISS/drafts/kittens
    TODAY=`date +'%Y%m%d'`
    edit "working_docs/brainstorm-$TODAY.md"
}

dbsr() { # rename dissertation brainstorm once it has a title
    cd ~/DISS/drafts/kittens
    TODAY=`date +'%Y%m%d'`
    NAME="working_docs/brainstorm-$TODAY.md"
    TITLESTRING=`head -1 $NAME |sed 's/[#%] //'|gsed -e 's/./\L\0/g'|sed 's/ /_/g'`
    NEWNAME="working_docs/brainstorm-$TODAY-$TITLESTRING.md"
    mv $NAME $NEWNAME
}

ndbs() { # dissertation brainstorm, with rename of existing first.
    cd ~/DISS/drafts/kittens
    dbsr
    TODAY=`date +'%Y%m%d'`
    edit "working_docs/brainstorm-$TODAY.md"
}




teach2042R() {
    setloc
    cd $TEACHDIR/AMH2042-RVC
    here=`pwd`
    dir=`basename $here`
    newtitle="TEACHING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window NEXT_STEPS.md 
}

teach2042U() {
    setloc
    cd $TEACHDIR/AMH2042-U02
    here=`pwd`
    dir=`basename $here`
    newtitle="TEACHING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window NEXT_STEPS.md 
}



teach4935() {
    setloc
    cd $TEACHDIR/SSDH
    here=`pwd`
    dir=`basename $here`
    newtitle="TEACHING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    git pull
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    edit --new-window NEXT_STEPS.md 
}


teachMAWH() {
    setloc
    cd $TEACHDIR/MAWH
    here=`pwd`
    dir=`basename $here`
    newtitle="TEACHING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window NEXT_STEPS.md 
}

teach4935() {
    setloc
    cd $TEACHDIR/SSDH
    here=`pwd`
    dir=`basename $here`
    newtitle="TEACHING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window NEXT_STEPS.md 
}


teenagers() {
    setloc
    cd $PROJDIR/edited_collection_on_age
    here=`pwd`
    dir=`basename $here`
    newtitle="WRITING - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    $EDITOR --new-window NEXT_STEPS.md essay.md
}


getpromoted() {
    setloc
    cd $PORTFOLIODIR
    here=`pwd`
    dir=`basename $here`
    newtitle="PROMOTION FILE - $dir"
    echo -n -e "\033]0;$newtitle\007"
    git pull origin master
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
    edit --new-window NEXT_STEPS.md 
}

function mdclip {
	pandoc $1 -t html |pbcopy
}

function word {
	open -a /Applications/Microsoft\ Office\ 2011/Microsoft\ Word.app/ $1
}
 

finishup() {
    # TODO: expand this to check status for uncommitted files and require commit first
    git status
}

# to look for particular strings in all drafts. Good for finding phrases/ideas/etc
searchdrafts() {
    grep -r "$@" ~/DISS/drafts/* 2>&1 >/tmp/searchdrafts && vi /tmp/searchdrafts
}

# rough count of how many words added to a draft since the last commit.
newwords() {
    git diff "$1" |grep -E '^\+' | wc -w
}

# print my current ip (eth0)
myip() {
	ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'
}

# for interacting with iDisplay to deal with remote screen setup on iPad.
# this assumes that of the 2 iDisplay TCP ports, the second one (even numbered) is always the one to connect to.
idsetup() {
	echo 'host: ' `myip`
	echo 'port: ' `lsof |grep iDisp|grep LISTEN |awk '{print $9}' |sed 's/\*://'|tail -1`
}




# Project logs:

LOGPATH=./logs
DAILYLOG=`date "+dailylog_%Y-%m-%d.md"`
LOGFILE=$LOGPATH/$DAILYLOG

PROJECT_LOG=JOURNAL.md

stamp() {
    # copy in a timestamp to add to log
    date +'## %Y-%m-%d %A:'|pbcopy
}

getstamp() {
	stamp
	pbpaste
}

prepend_log_stamp () {
	TMP=/tmp/foo.log
	getstamp > $TMP && printf "\n\n" >> $TMP && cat $1 >> $TMP 
	mv $1 $1.bak
	mv $TMP $1
}

plog () {
	# Adds a date stamp to the project log in the current path.
	# TO DO:
	#  * log stamp substitution for places that have a top-bound task list,
	# 		as with existing NEXT_STEPS files.
	#  * add support for a .logname file in projects which specifies the local filename.
	if [ -e $PROJECT_LOG ]
	then
		prepend_log_stamp $PROJECT_LOG
		edit $PROJECT_LOG
	else
		echo "No log file $PROJECT_LOG; Please create one"
		# Just to keep from doing something silly.
	fi
}

kz () {
	# kills Zotero standalone. Ugh.
	ps auxww |grep Zotero.app|grep -v grep|head -1|awk '{print $2}'|xargs kill
}

# Commented out for future use
# 
# mklog () {
# 	# make a log file. Keep it on Dropbox, with a hard link to the other
# 	# logs directory.
# 	if ! [ -e $LOGFILE ]	
# 	then
# 		~/bin/makelog.py > $LOGFILE
# 	fi
# }
# 
# rmlog () {
# 	# remove log file. 
# 	if [ -e $LOGFILE ]	
# 	then
# 		rm -iv $LOGFILE
# 	fi
# }
# 
# edlog () {
# 	# edit the daily log file; create it if it doesn't exist.
# 	if ! [ -e $LOGFILE ]	
# 	then
# 		mklog
# 	fi
# 	open -a "TextWrangler.app" $SHAREDFILE
# 
# }





